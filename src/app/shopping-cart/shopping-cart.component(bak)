import { Component, OnInit, OnDestroy } from '@angular/core';
import { FormGroup, FormArray, FormBuilder, Validators } from '@angular/forms';
import { Router } from '@angular/router';
import { NgRedux } from '@angular-redux/store';
import { IAppState } from "../store/model";
import { HeaderComponent } from '../header/header.component';
import { ShoppingCartService } from '../services/shopping.cart.service';
import { currency } from '../objects/currency.class';
import { round } from '../modules/round.module';
import { generateArray } from "../modules/array.module";

@Component({
  selector: 'app-shopping-cart',
  templateUrl: './shopping-cart.component.html',
  styleUrls: ['./shopping-cart.component.css']
})
export class ShoppingCartComponent implements OnInit {

  public updateCartForm: FormGroup; //our form model
  public cartItems: any = [];    //this array variable stores the shopping cart item objects
  public qtyMsg: any = [];
  public cartTotalPrice: number = 0; //this variable stores the total price of all the items in the shopping cart
  public total_qty: number = 0;  // this variable stores the total quantity
  public updateCartSubscription: any;
  public currencySubscription: any;

  public currency: currency = {
    currency: " USD",
    forex: "USD/USD",
    rate: 1
  };
  public testData: any = "";

  constructor(
    public shoppingcart: ShoppingCartService,
    //private _router: Router,
    public _fb: FormBuilder,
    public ngRedux: NgRedux<IAppState>
  ) {}

  ngOnInit() {
    this.shoppingCartItems();
    this.createForm();
    this.formUpdateEvent();
  }

  createForm() {
    //create the form
    this.updateCartForm = this._fb.group({
      carts: this._fb.array([
        this.initCartForm(),  //initialize the form
      ])
    });
  }

  initCartForm() {
    return this._fb.group({
      productName:[''],
      productQuantity: [''],
      productPrice: [''],
      productTotalPrice: ['']
    });
  }

  formUpdateEvent() {
    this.updateCartSubscription = this.updateCartForm.valueChanges
    .debounceTime(500)
    .distinctUntilChanged()
    .subscribe(data => {

      let result: any = null;
      this.qtyMsg = [];

      //console.log(data);
      //this will automatically update the total price and the store session
      result = this.isFormValid(data.carts);

      if (result.valid) {
        this.cartTotalPrice = result.totalPrice;
        //console.log(this.cartTotalPrice);
        if (this.total_qty > 0) {
          this.updateCart(data.carts);
        }
      }
      else {
        this.qtyMsg[result.msgIndex] = "invalid input";
      }
    });
  }
  //This function is for display purposes to show the price with 2 decimal places
  coinPrice(price: number, qty: number = 1): string {
    //console.log(this.round(33 * 1.287168 * 2, 2));
    return (round(price * this.currency.rate, 2) * qty).toFixed(2);
  }

  coinPriceDisplay(price: number): string {
    return price.toFixed(2);
  }
  
  getCurrencyRate() {
    this.currencySubscription = this.ngRedux.select<any>()
    .subscribe(newCurrency => {
      //this.currencyRate = newCurrency.switchCurrencyReducer.currency.rate;
      this.currency = newCurrency.switchCurrencyReducer.currency;
      if (this.cartItems.length > 0){
        if (this.currency.rate == 1 ){
          this.cartTotalPrice = 0;
          this.cartItems.map(x => {
            this.cartTotalPrice = this.cartTotalPrice + (round(x.price, 2));
          });
        }
        else {
          this.cartTotalPrice = 0;
          this.cartItems.map(x => {
            this.cartTotalPrice = this.cartTotalPrice + (round(x.item.price * this.currency.rate, 2) * x.qty);
          });
        }
      }
    });
  }

  showCartItems(items: any) {
    const control = <FormArray>this.updateCartForm.controls['carts'];

    items.map((x,i)=> {
      control.insert(i, this._fb.group({
        productName:[x.item.title],
        productQuantity: [x.qty],
        productPrice: [x.item.price],
        productTotalPrice: ['']
      }));
    });
    control.removeAt(items.length);

    console.log(control);
  }
/*
  clearCartFirstItem() {
    //Clears the first item because its initialized with ''
    const control = <FormArray>this.updateCartForm.controls['carts'];
    control.removeAt(0);
  }
*/
  shoppingCartItems() {
    this.shoppingcart.getCartItems()    //getCartItems observable gets the shopping cart items and stores it into the cartItems array
      .subscribe(
        data => {
          console.log(data);
          if(data.cart) {
            this.cartItems = generateArray(data.cart.items);
            this.getCurrencyRate();

            this.total_qty = data.cart.totalQty;  //total quantity of items in the shopping cart
            //this.clearCartFirstItem();
            this.showCartItems(this.cartItems);

          }

        
        },
        err => console.log(err),
        () => console.log('Get Cart Items Complete')
      )
  }

  removeItem(i: number) {
    // remove address from the list
    const control = <FormArray>this.updateCartForm.controls['carts'];
    control.removeAt(i);
    this.cartItems.splice(i, 1);
  }

  isFormValid(cartFormArray: any) {
    let totalPrice: number = 0;
    let msgIndex: number = null;
    let valid: boolean = true;
    cartFormArray.map( (x, i) => {
      if (Number(x.productQuantity) < 1 || !Number.isInteger(Number(x.productQuantity))) {
        msgIndex = i;
        totalPrice = 0;
        valid = false;
        return {valid, totalPrice, msgIndex}
      }
      totalPrice = totalPrice + (round(x.productPrice * this.currency.rate, 2) * x.productQuantity);
    });
    return {valid, totalPrice, msgIndex};
  }

  updateCart(cartFormArray: any) {
    //console.log(cartForm);

    cartFormArray.map( (x, i) => {
      this.cartItems[i].qty = x.productQuantity;
      this.cartItems[i].price = x.productQuantity * x.productPrice;
    });

    //console.log(this.cartItems);
    
    this.shoppingcart.updateCart(this.cartItems)
    .subscribe(
      data => {
        this.total_qty = data.totalQuantity;
        this.cartTotalPrice = 0;
        //console.log(data.items);
        if(data.items) {
          Object.keys(data.items).map((key, index) => {
            this.cartTotalPrice = this.cartTotalPrice + (round(data.items[key].item.price * this.currency.rate, 2) * data.items[key].qty);
          });
        }
      },
      err => console.log(err),
      () => console.log('Update cart complete')
    )

  
  }

  // unsubscribe observables
  ngOnDestroy() {                    // <- New
    if(this.updateCartSubscription){
      this.updateCartSubscription.unsubscribe(); // <- New
    }
    if(this.currencySubscription){
      this.currencySubscription.unsubscribe();
    }
  }   
  /*
  shoppingCartItems() {
    this.shoppingcart.getCartItems()    //getCartItems observable gets the shopping cart items and stores it into the cartItems array
      .subscribe(
        data => {
          if (data.coins) {
            this.cartItems=data.coins;
            this.cartTotalPrice = data.totalPrice;  //total price of all the items in the shopping cart
            this.total_qty = data.totalQuantity;  //total quantity of items in the shopping cart
          }
          else {
            this.cartItems = null;
            this.cartTotalPrice = 0;
            this.total_qty = 0;
          }
        },
        err => console.log(err),
        () => console.log('Get Cart Items Complete')
      )
  }
  */

}
